#!/bin/sh
set -e

show_help () {
    echo "Usage: $0 [ help | clean ]"
    echo "       $0 [ min | med | max ] [ ref | emb ]"
    echo " help   Show this help"
    echo " clean  Delete the Build directory"
    echo ""
    echo " min    Minify JS sources"
    echo " med    Medium JS sources"
    echo " max    Concat JS"
    echo ""
    echo " ref    Reference JS"
    echo " emb    Embed JS"
}

extract_closure_compiler () {
    BDIR=$1
    CLDIR=$BDIR/closure
    mkdir -p $CLDIR
    if [ ! -e $CLDIR/clcompiler.jar ]; then
        tar -xzf ./libs/compiler-20200719.tar.gz -C $CLDIR
        mv $CLDIR/closure-compiler-v20200719.jar $CLDIR/clcompiler.jar
    fi
    CL_COMPILER="java -jar $CLDIR/clcompiler.jar"
}

rm_closure_compiler () {
    BDIR=$1
    CLDIR=$BDIR/closure
    rm -rf $CLDIR
}

embed_js () {
    JSFIL=$1
    TGT=$2
    sed -n -e "/<!-- TWEDRA_JS_TEMPLATE_STRING -->/q;p" $TGT > tmp-a.txt
    sed -e "1,/<!-- TWEDRA_JS_TEMPLATE_STRING -->/ d" $TGT > tmp-b.txt
    (
      cat tmp-a.txt
      echo "<script type='text/javascript'>"
      cat $JSFIL
      echo "</script>"
      cat tmp-b.txt
    ) > $TGT
    rm -f tmp-a.txt
    rm -f tmp-b.txt
}


embed_css () {
    CSSFIL=$1
    TGT=$2
    if [ -f $FIL_CSS ]; then
      sed -n -e "/<!-- TWEDRA_CSS_TEMPLATE_STRING -->/q;p" $TGT > tmp-a.txt
      sed -e "1,/<!-- TWEDRA_CSS_TEMPLATE_STRING -->/ d" $TGT > tmp-b.txt
      (
        cat tmp-a.txt
        echo "<style type='text/css'>"
        cat $CSSFIL
        echo "</style>"
        cat tmp-b.txt
      ) > $TGT
      rm -f tmp-a.txt
      rm -f tmp-b.txt
    fi
}

embed_it () {
    FIL_JS=$1
    FIL_CSS=$2
    TMPL=$3
    TGT=$4
    cp $TMPL $TGT
    embed_css $FIL_CSS $TGT
    embed_js  $FIL_JS  $TGT
}

reference_js () {
   REF=$1
   TGT=$2
   sed -i -e "s|<!-- TWEDRA_JS_TEMPLATE_STRING -->|<script type='text/javascript' src='$REF'></script>|" $TGT
}

reference_css () {
   REF=$1
   TGT=$2
   sed -i -e "s|<!-- TWEDRA_CSS_TEMPLATE_STRING -->|<link rel='stylesheet' href='$REF'>|" $TGT
}

reference_it () {
    REF_JS=$1
    REF_CSS=$2
    TMPL=$3
    TGT=$4
    cp $TMPL $TGT
    reference_css $REF_CSS $TGT
    reference_js  $REF_JS  $TGT
}

medify_js () {
    BDIR=$1
    NM=$2
    TGT=$3
    SRC=$BDIR/$NM.js

    extract_closure_compiler $BDIR
    echo "Creating simple optimizations"
    # Output ES5 to run on older browsers.
    $CL_COMPILER --compilation_level SIMPLE_OPTIMIZATIONS $SRC --language_out ECMASCRIPT5 > $TGT
    rm_closure_compiler $BDIR
}

minify_js () {
    BDIR=$1
    NM=$2
    TGT=$3
    SRC=$BDIR/$NM.js

    extract_closure_compiler $BDIR

    (
      echo "/**"
      echo " * This file was auto-generated by $0"
      echo " *"
      echo " * @externs"
      echo " * @suppress {externsValidation}"
      echo " */"
      echo "$NM;"
      echo "$NM.PolyPlayer;"
      echo "$NM.PolyPlayer.loadConfig = function () {};"
      echo "$NM.PolyPlayer.setRotatable = function () {};"
      echo "$NM.PolyPlayer.setTwistable = function () {};"

      echo "$NM.PolyPlayers;"
      echo "$NM.PolyPlayers.getPlayers = function () {};"
      echo "$NM.PolyPlayers.populatePage = function () {};"

    ) > externs.txt

    echo "Creating advanced optimizations (the three compiler warnings can be ignored)"
    # Output ES5 to run on older browsers.
    $CL_COMPILER --compilation_level ADVANCED_OPTIMIZATIONS $SRC --js externs.txt --language_out ECMASCRIPT5 > $TGT
    rm -f externs.txt
    rm_closure_compiler $BDIR
}


concat_js () {
    BDIR=$1
    NM=$2
    AP=$BDIR/$3
    TGT=$BDIR/$NM.js
    (
    echo "const $NM = (() => {"

    # Order matters. e.g. Cube must be defined before it is sub-classed.
    for fil in \
      Util.js \
      classes/Puzzle.js \
      classes/Point.js \
      classes/Face.js \
      classes/Cycle.js \
      classes/Sticker.js \
      classes/Quaternion.js \
      classes/Vector.js \
      classes/Puzzles/Cube.js \
      classes/Puzzles/Icosahedron.js \
      classes/Puzzles/Octahedron.js \
      classes/Puzzles/Dodecahedron.js \
      classes/Puzzles/Tetrahedron.js \
      ui/Element.js \
      ui/Anchor.js \
      ui/Button.js \
      ui/Canvas.js \
      ui/Controls.js \
      ui/Text.js \
      ui/PolyPlayerImpl.js \
      ui/PolyPlayer.js \
      ui/PolyPlayers.js \
      ui/StrIter.js \
      ui/ConfigParser.js \
      ui/AlgParser.js \
      ; do
          cat ./src/js/$fil
          echo ""
      done

      echo "return { PolyPlayer: PolyPlayer, PolyPlayers: PolyPlayers }"
      echo "})()"
    ) > $TGT

    (
      echo "window.addEventListener('load', () => {"
      echo "  var p = $NM.PolyPlayers.populatePage(document)"
      echo "  if (p) $NM.players = p.getPlayers()"
      echo "})"
    ) > $AP

}


# Github uses './docs' as a publishing source for the website.
OUTDIR=docs         # Name of output directory.

AUTOPOP=autopop.js  # Temporary filename for storing JS code.

NAM=twedra          # A name that third-parties can use to reference this project.

case "$1" in
    "help")
        show_help
        exit
        ;;
    "clean")
        rm -rf $OUTDIR
        exit
        ;;
esac


mkdir -p $OUTDIR

# Package Javascript sources.
concat_js $OUTDIR $NAM $AUTOPOP
case "$1" in
    "min")
        JSTGT=$NAM.min.js
        minify_js $OUTDIR $NAM $OUTDIR/$JSTGT
        ;;
    "med")
        JSTGT=$NAM.med.js
        medify_js $OUTDIR $NAM $OUTDIR/$JSTGT
        ;;
    "max" | *)
        JSTGT=$NAM.js
        ;;
esac

# Append code which auto-populates all 'poly-player' elements on page.
cat $OUTDIR/$AUTOPOP >> $OUTDIR/$JSTGT
rm $OUTDIR/$AUTOPOP


CSS=soln.css
cp ./src/$CSS $OUTDIR

# Modify HTML template files.
for fil in \
    sandbox \
    soln-anatomy \
    soln-big-cube \
    soln-big-dodec \
    soln-big-octa \
    soln-big-tetra \
    soln-cube \
    soln-hedgeslammer \
    twiddler \
    ; do
        ACT="$2"
        CSSTGT=$CSS
        if [ "$fil" = "twiddler" ]; then
            ACT=emb
            CSSTGT=''
        fi
        case "$ACT" in
            "ref")     reference_it         $JSTGT         $CSSTGT ./src/html/$fil.tmpl $OUTDIR/$fil.html ;;
            "emb" | *) embed_it     $OUTDIR/$JSTGT $OUTDIR/$CSSTGT ./src/html/$fil.tmpl $OUTDIR/$fil.html ;;
        esac
        sed -i "s/TWEDRA_NAME_TEMPLATE_STRING.players/$NAM.players/" $OUTDIR/$fil.html
done


cp ./src/html/soln-cube-alt.html   $OUTDIR
cp ./src/js/jjcube.js              $OUTDIR
cp ./src/html/jjcube.html          $OUTDIR
cp ./src/jjcube.css                $OUTDIR
cp ./src/html/index.html           $OUTDIR
